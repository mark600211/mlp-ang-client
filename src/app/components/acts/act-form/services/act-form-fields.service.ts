import { Injectable } from "@angular/core";
import {
  CreateCustomerGQL,
  GetCustomersForOptionGQL,
  PatchCustomerGQL,
  GetWholeCustomerGQL,
  GetGeneralCustomersForOptionGQL,
  GetWholeGeneralCustomerGQL,
  CreateGeneralCustomerGQL,
  PatchGeneralCustomerGQL,
  GetLabsForOptionGQL,
  GetWholeLabGQL,
  CreateLabGQL,
  PatchLabGQL,
} from "src/types/consumers/generated";
import {
  CreateClimaticEnvironmentalGQL,
  CreateDefinedIndicatorGQL,
  CreateEnvironmentalEngineerGQL,
  CreateGoalGQL,
  CreateMethodGQL,
  CreateNormativeDocumentGQL,
  CreateObjectNameGQL,
  CreatePassedSampleGQL,
  CreatePlaceGQL,
  CreatePlanningGQL,
  CreatePreparationGQL,
  CreateRepresentativeGQL,
  CreateSampleGQL,
  CreateSampleTypeGQL,
  CreateToolTypeGQL,
  CreateTypeOfSampleGQL,
  GetClimaticEnvironmentalGQL,
  GetClimaticEnvironmentalsForOptionGQL,
  GetDefinedIndicatorGQL,
  GetDefinedIndicatorsForOptionGQL,
  GetEnvironmentalEngineerGQL,
  GetEnvironmentalEngineersForOptionGQL,
  GetGoalForOptionGQL,
  GetGoalGQL,
  GetMethodGQL,
  GetMethodsForOptionGQL,
  GetNormativeDocumentGQL,
  GetNormativeDocumentsForOptionGQL,
  GetObjectNameGQL,
  GetObjectNamesForOptionGQL,
  GetPassedSampleGQL,
  GetPassedSamplesForOptionGQL,
  GetPlaceGQL,
  GetPlacesForOptionGQL,
  GetPlanningGQL,
  GetPlanningsForOptionGQL,
  GetPreparationGQL,
  GetPreparationsForOptionGQL,
  GetRepresentativeGQL,
  GetRepresentativesForOptionGQL,
  GetSampleGQL,
  GetSamplesForOptionGQL,
  GetSampleTypeGQL,
  GetSampleTypesForOptionGQL,
  GetToolTypeGQL,
  GetToolTypesForOptionGQL,
  GetTypeOfSampleGQL,
  GetTypeOfSamplesForOptionGQL,
  PatchClimaticEnvironmentalGQL,
  PatchDefinedIndicatorGQL,
  PatchEnvironmentalEngineerGQL,
  PatchGoalGQL,
  PatchMethodGQL,
  PatchNormativeDocumentGQL,
  PatchObjectNameGQL,
  PatchPassedSampleGQL,
  PatchPlaceGQL,
  PatchPlanningGQL,
  PatchPreparationGQL,
  PatchRepresentativeGQL,
  PatchSampleGQL,
  PatchSampleTypeGQL,
  PatchToolTypeGQL,
  PatchTypeOfSampleGQL,
} from "src/types/options/generated";
import { ACT_FORM_FIELDS } from "../models/enum/act-form-fields.enum";
import { AutocompleteField } from "../models/fields/autocomplete-filed.model";
import { DateTimeField } from "../models/fields/date-time.model";
import { FieldBase } from "../models/fields/field-base.model";
import { InputField } from "../models/fields/input-field.model";
import { ManySelectField } from "../models/fields/many-select-filed.model";
import { SelectField } from "../models/fields/select-filed.model";
import { TextField } from "../models/fields/text-filed.model";
import { OptionFormFieldsAddressService } from "./option-form-fields-addres.service";
import { OptionFormFieldsGeneralService } from "./option-form-fields-general.service";

@Injectable({
  providedIn: "root",
})
export class ActFormFieldsService {
  constructor() {}

  getFields(): FieldBase<any>[] {
    let fields = [
      new InputField({
        required: true,
        visible: true,
        key: "name",
        label: "Номер пробы",
      }),
      new SelectField({
        required: true,
        visible: true,
        editable: true,
        key: ACT_FORM_FIELDS.CUSTOMER,
        label: "Заказчик",
        getOptionsService: GetCustomersForOptionGQL,
        getsType: "findAllCustomer",
        getOptionService: GetWholeCustomerGQL,
        getType: "findByIdCustomer",
        postOptionService: CreateCustomerGQL,
        postType: "createCustomer",
        patchOptionService: PatchCustomerGQL,
        patchType: "updateCustomer",
        optionFieldsService: OptionFormFieldsAddressService,
      }),
      new SelectField({
        required: true,
        visible: true,
        key: ACT_FORM_FIELDS.GENERAL_CUSTOMER,
        label: "Генеральный заказчик",
        editable: true,
        getOptionsService: GetGeneralCustomersForOptionGQL,
        getsType: "findAllGeneralCustomer",
        getOptionService: GetWholeGeneralCustomerGQL,
        getType: "findByIdGeneralCustomer",
        postOptionService: CreateGeneralCustomerGQL,
        postType: "createGeneralCustomer",
        patchOptionService: PatchGeneralCustomerGQL,
        patchType: "updateGeneralCustomer",
        optionFieldsService: OptionFormFieldsAddressService,
      }),

      new SelectField({
        required: true,
        visible: true,
        key: ACT_FORM_FIELDS.LAB,
        label: "Лаборатория",
        editable: true,
        getOptionsService: GetLabsForOptionGQL,
        getsType: "findAllLab",
        getOptionService: GetWholeLabGQL,
        getType: "findByIdLab",
        postOptionService: CreateLabGQL,
        postType: "createLab",
        patchOptionService: PatchLabGQL,
        patchType: "updateLab",
        optionFieldsService: OptionFormFieldsAddressService,
      }),

      new SelectField({
        visible: true,
        required: true,
        key: ACT_FORM_FIELDS.TYPE_OF_SAMPLE,
        label: "Тип отбираемой Среды",
        editable: true,
        getOptionsService: GetTypeOfSamplesForOptionGQL,
        getsType: "findAllTypeOfSample",
        getOptionService: GetTypeOfSampleGQL,
        getType: "findByIdTypeOfSample",
        postOptionService: CreateTypeOfSampleGQL,
        postType: "createTypeOfSample",
        patchOptionService: PatchTypeOfSampleGQL,
        patchType: "updateTypeOfSample",
        optionFieldsService: OptionFormFieldsGeneralService,
      }),

      new AutocompleteField({
        visible: true,
        key: ACT_FORM_FIELDS.OBJECT_NAME,
        label: "Наименование объекта",
        getOptionsService: GetObjectNamesForOptionGQL,
        getsType: "findAllObjectName",
        getOptionService: GetObjectNameGQL,
        getType: "findByIdObjectName",
        postOptionService: CreateObjectNameGQL,
        postType: "createObjectName",
        patchOptionService: PatchObjectNameGQL,
        patchType: "updateObjectName",
        optionFieldsService: OptionFormFieldsGeneralService,
      }),

      new SelectField({
        visible: true,
        key: ACT_FORM_FIELDS.PLACE,
        label: "Место отбора пробы",
        editable: true,
        getOptionsService: GetPlacesForOptionGQL,
        getsType: "findAllPlace",
        getOptionService: GetPlaceGQL,
        getType: "findByIdPlace",
        postOptionService: CreatePlaceGQL,
        postType: "createPlace",
        patchOptionService: PatchPlaceGQL,
        patchType: "updatePlace",
        optionFieldsService: OptionFormFieldsGeneralService,
      }),

      new DateTimeField({
        required: true,
        visible: true,
        key: "datetime",
      }),

      new SelectField({
        visible: true,
        key: ACT_FORM_FIELDS.METHOD,
        label: "Метод отбора проб",
        editable: true,
        getOptionsService: GetMethodsForOptionGQL,
        getsType: "findAllMethod",
        getOptionService: GetMethodGQL,
        getType: "findByIdMethod",
        postOptionService: CreateMethodGQL,
        postType: "createMethod",
        patchOptionService: PatchMethodGQL,
        patchType: "updateMethod",
        optionFieldsService: OptionFormFieldsGeneralService,
      }),

      new SelectField({
        visible: true,
        key: ACT_FORM_FIELDS.TOOL_TYPE,
        label: "Tип пробоотборного устройства",
        editable: true,
        getOptionsService: GetToolTypesForOptionGQL,
        getsType: "findAllToolType",
        getOptionService: GetToolTypeGQL,
        getType: "findByIdToolType",
        postOptionService: CreateToolTypeGQL,
        postType: "createToolType",
        patchOptionService: PatchToolTypeGQL,
        patchType: "updateToolType",
        optionFieldsService: OptionFormFieldsGeneralService,
      }),

      new AutocompleteField({
        visible: true,
        key: ACT_FORM_FIELDS.CLIMATIC_ENVIRONMENTAL,
        label: "Климатические условия окружающей среды при отборе проб",
        getOptionsService: GetClimaticEnvironmentalsForOptionGQL,
        getsType: "findAllClimaticEnvironmental",
        getOptionService: GetClimaticEnvironmentalGQL,
        getType: "findByIdClimaticEnvironmental",
        postOptionService: CreateClimaticEnvironmentalGQL,
        postType: "createClimaticEnvironmental",
        patchOptionService: PatchClimaticEnvironmentalGQL,
        patchType: "updateClimaticEnvironmental",
        optionFieldsService: OptionFormFieldsGeneralService,
      }),

      new AutocompleteField({
        visible: true,
        key: ACT_FORM_FIELDS.PLANNING,
        label: "План (программа) отбора",
        getOptionsService: GetPlanningsForOptionGQL,
        getsType: "findAllPlanning",
        getOptionService: GetPlanningGQL,
        getType: "findByIdPlanning",
        postOptionService: CreatePlanningGQL,
        postType: "createPlanning",
        patchOptionService: PatchPlanningGQL,
        patchType: "updatePlanning",
        optionFieldsService: OptionFormFieldsGeneralService,
      }),

      new ManySelectField({
        visible: true,
        key: ACT_FORM_FIELDS.NORMATIVE_DOCUMENT,
        label: "НД на метод отбора",
        editable: true,
        getOptionsService: GetNormativeDocumentsForOptionGQL,
        getsType: "findAllNormativeDocument",
        getOptionService: GetNormativeDocumentGQL,
        getType: "findByIdNormativeDocument",
        postOptionService: CreateNormativeDocumentGQL,
        postType: "createNormativeDocument",
        patchOptionService: PatchNormativeDocumentGQL,
        patchType: "updateNormativeDocument",
        optionFieldsService: OptionFormFieldsGeneralService,
      }),

      new SelectField({
        visible: true,
        key: ACT_FORM_FIELDS.SAMPLE_TYPE,
        label: "Тип пробы",
        editable: true,
        getOptionsService: GetSampleTypesForOptionGQL,
        getsType: "findAllSampleType",
        getOptionService: GetSampleTypeGQL,
        getType: "findByIdSampleType",
        postOptionService: CreateSampleTypeGQL,
        postType: "createSampleType",
        patchOptionService: PatchSampleTypeGQL,
        patchType: "updateSampleType",
        optionFieldsService: OptionFormFieldsGeneralService,
      }),

      new AutocompleteField({
        visible: true,
        key: ACT_FORM_FIELDS.SAMPLE,
        label: "Объем отобранной пробы, материал тары",
        editable: true,
        getOptionsService: GetSamplesForOptionGQL,
        getsType: "findAllSample",
        getOptionService: GetSampleGQL,
        getType: "findByIdSample",
        postOptionService: CreateSampleGQL,
        postType: "createSample",
        patchOptionService: PatchSampleGQL,
        patchType: "updateSample",
        optionFieldsService: OptionFormFieldsGeneralService,
      }),

      new ManySelectField({
        visible: true,
        key: ACT_FORM_FIELDS.PREPARATIONS,
        label: "Подготовка пробы к хранению",
        editable: true,
        getOptionsService: GetPreparationsForOptionGQL,
        getsType: "findAllPreparation",
        getOptionService: GetPreparationGQL,
        getType: "findByIdPreparation",
        postOptionService: CreatePreparationGQL,
        postType: "createPreparation",
        patchOptionService: PatchPreparationGQL,
        patchType: "updatePreparation",
        optionFieldsService: OptionFormFieldsGeneralService,
      }),

      new SelectField({
        visible: true,
        key: ACT_FORM_FIELDS.GOAL,
        label: "Цель исследования воды",
        editable: true,
        getOptionsService: GetGoalForOptionGQL,
        getsType: "findAllGoal",
        getOptionService: GetGoalGQL,
        getType: "findByIdGoal",
        postOptionService: CreateGoalGQL,
        postType: "createGoal",
        patchOptionService: PatchGoalGQL,
        patchType: "updateGoal",
        optionFieldsService: OptionFormFieldsGeneralService,
      }),

      new ManySelectField({
        visible: true,
        key: ACT_FORM_FIELDS.DEFINED_INDICATORS,
        label: "Определяемые показатели",
        editable: true,
        getOptionsService: GetDefinedIndicatorsForOptionGQL,
        getsType: "findManyWhereDefinedIndicator",
        getOptionService: GetDefinedIndicatorGQL,
        getType: "findByIdDefinedIndicator",
        postOptionService: CreateDefinedIndicatorGQL,
        postType: "createDefinedIndicator",
        patchOptionService: PatchDefinedIndicatorGQL,
        patchType: "updateDefinedIndicator",
        optionFieldsService: OptionFormFieldsGeneralService,
        isDepened: true,
        dependFrom: [
          { field: ACT_FORM_FIELDS.LAB, label: "Лаборатория" },
          {
            field: ACT_FORM_FIELDS.TYPE_OF_SAMPLE,
            label: "Тип отбираемой пробы",
          },
        ],
      }),

      new TextField({
        visible: true,
        key: ACT_FORM_FIELDS.ADDITIONS,
        label: "Дополнительные сведения",
        // getOptionsService: GetAdditionsForOptionGQL,
        // getsType: "findAllAddition",
        // getOptionService: GetAdditionGQL,
        // getType: "findByIdAddition",
        // postOptionService: CreateAdditionGQL,
        // postType: "createAddition",
        // patchOptionService: PatchAdditionGQL,
        // patchType: "updateAddition",
        // optionFieldsService: OptionFormFieldsGeneralService,
      }),

      new TextField({
        visible: true,
        key: ACT_FORM_FIELDS.INFORMATION_ABOUT_SELECTION,
        label: "Сведения о проведенных при отборе измерениях",
        // getOptionsService: GetInformationAboutSelectionsForOptionGQL,
        // getsType: "findAllInformtionAboutSelection",
        // getOptionService: GetInformationAboutSelectionGQL,
        // getType: "findByIdInformtionAboutSelection",
        // postOptionService: CreateInformationAboutSelectionGQL,
        // postType: "createInformtionAboutSelection",
        // patchOptionService: PatchInformationAboutSelectionGQL,
        // patchType: "updateInformtionAboutSelection",
        // optionFieldsService: OptionFormFieldsGeneralService,
      }),

      new SelectField({
        visible: true,
        key: "environmentalEngineer",
        label: "Должность, Ф.И.О., подпись лица, отбирающего пробу",
        editable: true,
        getOptionsService: GetEnvironmentalEngineersForOptionGQL,
        getsType: "findAllEnvironmentalEngineer",
        getOptionService: GetEnvironmentalEngineerGQL,
        getType: "findByIdEnvironmentalEngineer",
        postOptionService: CreateEnvironmentalEngineerGQL,
        postType: "createEnvironmentalEngineer",
        patchOptionService: PatchEnvironmentalEngineerGQL,
        patchType: "updateEnvironmentalEngineer",
        optionFieldsService: OptionFormFieldsGeneralService,
      }),

      new SelectField({
        visible: true,
        key: "representative",
        label: "Должность, Ф.И.О., подпись представителя",
        editable: true,
        getOptionsService: GetRepresentativesForOptionGQL,
        getsType: "findAllRepresentative",
        getOptionService: GetRepresentativeGQL,
        getType: "findByIdRepresentative",
        postOptionService: CreateRepresentativeGQL,
        postType: "createRepresentative",
        patchOptionService: PatchRepresentativeGQL,
        patchType: "updateRepresentative",
        optionFieldsService: OptionFormFieldsGeneralService,
      }),

      new SelectField({
        visible: true,
        key: "passedSample",
        label: "Пробу сдал",
        editable: true,
        getOptionsService: GetPassedSamplesForOptionGQL,
        getsType: "findAllPassedSample",
        getOptionService: GetPassedSampleGQL,
        getType: "findByIdPassedSample",
        postOptionService: CreatePassedSampleGQL,
        postType: "createPassedSample",
        patchOptionService: PatchPassedSampleGQL,
        patchType: "updatePassedSample",
        optionFieldsService: OptionFormFieldsGeneralService,
      }),
    ];
    return fields;
  }
}
